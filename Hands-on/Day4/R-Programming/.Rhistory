install.packages("rmarkdown")
library(rmarkdown)
source("common.R")
knitr::include_graphics("diagrams/vectors/summary-tree.png")
source("common.R")
knitr::include_graphics("diagrams/vectors/summary-tree.png")
knitr::include_graphics("diagrams/vectors/summary-tree-atomic.png")
lgl_var <- c(TRUE, FALSE)
int_var <- c(1L, 6L, 10L)
dbl_var <- c(1, 2.5, 4.5)
chr_var <- c("these are", "some strings")
c(c(1, 2), c(3, 4))
knitr::include_graphics("diagrams/vectors/atomic.png")
NA > 5
10 * NA
!NA
str(c("a", 1))
a <- 1:3
attr(a, "x") <- "abcdef"
attr(a, "x")
attr(a, "y") <- 4:6
str(attributes(a))
# Or equivalently
a <- structure(
1:3,
x = "abcdef",
y = 4:6
)
str(attributes(a))
# When creating it:
x <- c(a = 1, b = 2, c = 3)
# By assigning a character vector to names()
x <- 1:3
names(x) <- c("a", "b", "c")
# Inline, with setNames():
x <- setNames(1:3, c("a", "b", "c"))
knitr::include_graphics("diagrams/vectors/attr-names-1.png")
# Two scalar arguments specify row and column sizes
x <- matrix(1:6, nrow = 2, ncol = 3)
x
# One vector argument to describe all dimensions
y <- array(1:12, c(2, 3, 2))
y
# You can also modify an object in place by setting dim()
z <- 1:6
dim(z) <- c(3, 2)
z
x1 <- array(1:5, c(1, 1, 5))
x2 <- array(1:5, c(1, 5, 1))
x3 <- array(1:5, c(5, 1, 1))
knitr::include_graphics("diagrams/vectors/summary-tree-s3-1.png")
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
setwd("D:/22-Trngs/2-Confirmed/1-Python-R-Programming/GH/Hands-on/Day4/R-Programming")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
c(
"You should use double quotes most of the time",
'Single quotes are better for including " inside the string'
)
paste(c("red", "yellow"), "lorry")
paste(c("red", "yellow"), "lorry", sep = "-")
paste(c("red", "yellow"), "lorry", collapse = ", ")
paste0(c("red", "yellow"), "lorry")
x <- (1:15) ^ 2
toString(x)
x
toString(x, width = 40)
x = toString(x, width = 40)
x
x = toString(x, width = 5)
x
cat(c("red", "yellow"), "lorry")
x <- c(
"I", "saw", "a", "saw", "that", "could", "out",
"saw", "any", "other", "saw", "I", "ever", "saw"
)
y <- noquote(x)
x
y
^^^^^^^^^^^^^^^^^^
pow <- 1:3
(powers_of_e <- exp(pow))
formatC(powers_of_e)
formatC(powers_of_e, digits = 3)               #3 sig figs
formatC(powers_of_e, digits = 3, width = 10)   #preceding spaces
formatC(powers_of_e, digits = 3, format = "e") #scientific formatting
formatC(powers_of_e, digits = 3, flag = "+")   #precede +ve values with +
sprintf("%s %d = %f", "Euler's constant to the power", pow, powers_of_e)
sprintf("%s %d = %f", "Euler's constant to the power", pow, powers_of_e)
sprintf("%s %d   = ---    %f", "Euler's constant to the power", pow, powers_of_e)
sprintf("To three decimal places, e ^ %d = %.3f", pow, powers_of_e)
sprintf("In scientific notation, e ^ %d = %e", pow, powers_of_e)
format(powers_of_e)
format(powers_of_e, digits = 3)                    #at least 3 sig figs
format(powers_of_e, digits = 3, trim = TRUE)       #remove leading zeroes
format(powers_of_e, digits = 3, scientific = TRUE)
prettyNum(
c(1e10, 1e-20),
big.mark   = ",",
small.mark = " ",
preserve.width = "individual",
scientific = FALSE
)
c(1e10, 1e-20)
prettyNum(
c(1e10, 1e-20),
big.mark   = ",",
small.mark = ",",
preserve.width = "individual",
scientific = FALSE
)
prettyNum(
c(1e10, 1e-20),
big.mark   = ",",
small.mark = ",",
preserve.width = "individual",
scientific = TRUE
)
^^^^^^^^^^^^^^^^^^
cat("foo\tbar", fill = TRUE)
cat("foo\nbar", fill = TRUE)
cat("foo\0bar", fill = TRUE)  #this throws an error
cat("foo\\bar", fill = TRUE)
cat("foo\"bar", fill = TRUE)
cat('foo\'bar', fill = TRUE)
cat("foo'bar", fill = TRUE)
cat('foo"bar', fill = TRUE)
cat("\a")
alarm()
^^^^^^^^^^^^^
toupper("I'm Shouting")
tolower("I'm Whispering")
^^^^^^^^^^^^^^^^^^^^^
woodchuck <- c(
"How much wood would a woodchuck chuck",
"If a woodchuck could chuck wood?",
"He would chuck, he would, as much as he could",
"And chuck as much wood as a woodchuck would",
"If a woodchuck could chuck wood."
)
substring(woodchuck, 1:6, 10)
substr(woodchuck, 1:6, 10)
^^^^^^^^^^^^^^^^^
strsplit(woodchuck, " ", fixed = TRUE)
strsplit(woodchuck, ",? ")
^^^^^^^^^^
getwd()
file.path("c:", "Program Files", "R", "R-devel")
?file.path
.Platform
.Platform$file
?file.path
file.path("c:", "Program Files", "R", "R-devel", fsep="\\")
file.path("c:", "Program Files", "R", "R-devel", fsep="-")
R.home()      #Same place: a shortcut to the R installation dir
path.expand(".")
path.expand("..")
path.expand("~")
path.expand("./atin")
file_name <- "C:/Program Files/R/R-devel/bin/x64/RGui.exe"
basename(file_name)
basename(file_name)
dirname(file_name)
^^^^^^^^^^^^^^^^
(heights <- data.frame(
height_cm = c(153, 181, 150, 172, 165, 149, 174, 169, 198, 163),
gender = c(
"female", "male", "female", "male", "male",
"female", "female", "male", "male", "female"
)
))
class(heights$gender)
heights$gender
heights$gender[1] <- "Female"  #notice the capital 'F'
heights$gender
levels(heights$gender)
levels(heights$gender)
nlevels(heights$gender)
gender_char <- c(
"female", "male", "female", "male", "male",
"female", "female", "male", "male", "female"
)
(gender_fac <- factor(gender_char))
^^^^^^^^^^^^^^^^^^^^^^
factor(gender_char, levels = c("male", "female"))
^^^^^^^^^^^^^^^^^^^^^^
factor(gender_char, levels = c(0,1))
^^^^^^^^^^^^^^^^^^^^^^
factor(gender_char)
factor(gender_fac, levels = c("male", "female"))
levels(gender_fac) <- c("male", "female")
gender_fac
relevel(gender_fac, "male")
^^^^^^^^^^^^^^^^^^^^^^
getting_to_work <- data.frame(
mode = c(
"bike", "car", "bus", "car", "walk",
"bike", "car", "bike", "car", "car"
),
time_mins = c(25, 13, NA, 22, 65, 28, 15, 24, NA, 14)
)
(getting_to_work <- subset(getting_to_work, !is.na(time_mins)))
unique(getting_to_work$mode)
getting_to_work$mode <- droplevels(getting_to_work$mode)
getting_to_work$mode <- droplevels(gender_fac)
droplevels(gender_fac)
?droplevels
gender_fac
^^^^^^^^^^^^^^^
happy_choices <- c("depressed", "grumpy", "so-so", "cheery", "ecstatic")
happy_values <- sample(
happy_choices,
10000,
replace = TRUE
)
happy_fac <- factor(happy_values, happy_choices)
head(happy_fac)
happy_fac
happy_ord <- ordered(happy_values, happy_choices)
head(happy_ord)
happy_choices
happy_ord
is.factor(happy_ord)
is.ordered(happy_fac)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ages <- 16 + 50 * rbeta(10000, 2, 3)
ages
grouped_ages <- cut(ages, seq.int(16, 66, 10))
head(grouped_ages)
table(grouped_ages)
class(ages)
class(grouped_ages)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
dirty <- data.frame(
x = c("1.23", "4..56", "7.89")
)
as.numeric(dirty$x)
as.numeric(as.character(dirty$x))
as.numeric(levels(dirty$x))[as.integer(dirty$x)]
factor_to_numeric <- function(f)
{
as.numeric(levels(f))[as.integer(f)]
}
^^^^^^^^^^^^^^^^^^^^^^^^
gl(3, 2)
gl(3, 2, labels = c("placebo", "drug A", "drug B"))
gl(3, 1, 6, labels = c("placebo", "drug A", "drug B")) #alternating
^^^^^^^^^^^^^^^^^^^^^^^^
gl(3, 2)
^^^^^^^^^^^^^^^^^^^^^^^^
?gl
gl(10, 5)
gl(3, 2, labels = c("placebo", "drug A", "drug B"))
gl(3, 1, 6, labels = c("placebo", "drug A", "drug B")) #alternating
^^^^^^^^^^^^^^^^^
treatment <- gl(3, 2, labels = c("placebo", "drug A", "drug B"))
gender <- gl(2, 1, 6, labels = c("female", "male"))
^^^^^^^^^^^^^^^^^
treatment <- gl(3, 2, labels = c("placebo", "drug A", "drug B"))
gender <- gl(2, 1, 6, labels = c("female", "male"))
interaction(treatment, gender)
